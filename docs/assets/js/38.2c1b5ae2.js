(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{410:function(t,_,a){"use strict";a.r(_);var v=a(9),e=Object(v.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"设计模式-design-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式-design-pattern"}},[t._v("#")]),t._v(" 设计模式(Design Pattern)")]),t._v(" "),a("blockquote",[a("p",[t._v("目录: "),a("a",{attrs:{href:"https://note.dolyw.com/design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://note.dolyw.com/design/"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_1-概念了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念了解"}},[t._v("#")]),t._v(" 1. 概念了解")]),t._v(" "),a("p",[a("strong",[t._v("设计模式")]),t._v("这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中")]),t._v(" "),a("p",[t._v("软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结")]),t._v(" "),a("p",[t._v("它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性")]),t._v(" "),a("h2",{attrs:{id:"_2-gof介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-gof介绍"}},[t._v("#")]),t._v(" 2. GOF介绍")]),t._v(" "),a("p",[t._v("在 1995 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念")]),t._v(" "),a("p",[t._v("四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则")]),t._v(" "),a("ul",[a("li",[t._v("对接口编程而不是对实现编程")]),t._v(" "),a("li",[t._v("优先使用对象组合而不是继承")])]),t._v(" "),a("h2",{attrs:{id:"_3-总图预览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-总图预览"}},[t._v("#")]),t._v(" 3. 总图预览")]),t._v(" "),a("h2",{attrs:{id:"_4-目的区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-目的区分"}},[t._v("#")]),t._v(" 4. 目的区分")]),t._v(" "),a("p",[t._v("根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种")]),t._v(" "),a("h3",{attrs:{id:"_4-1-创建型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-创建型模式"}},[t._v("#")]),t._v(" 4.1. 创建型模式")]),t._v(" "),a("p",[t._v("创建型模式的主要关注点是"),a("strong",[t._v("怎样创建对象")]),t._v("，它的主要特点是"),a("strong",[t._v("将对象的创建与使用分离")]),t._v("。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产")]),t._v(" "),a("ol",[a("li",[t._v("单例模式(Singleton)：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式")]),t._v(" "),a("li",[t._v("原型模式(Prototype)：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例")]),t._v(" "),a("li",[t._v("工厂方法模式(FactoryMethod)：定义一个用于创建产品的接口，由子类决定生产什么产品")]),t._v(" "),a("li",[t._v("抽象工厂模式(AbstractFactory)：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品")]),t._v(" "),a("li",[t._v("建造者模式(Builder)：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-结构型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-结构型模式"}},[t._v("#")]),t._v(" 4.2. 结构型模式")]),t._v(" "),a("p",[t._v("结构型模式描述"),a("strong",[t._v("如何将类或对象按某种布局组成更大的结构")]),t._v("。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象")]),t._v(" "),a("p",[t._v("由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性")]),t._v(" "),a("ol",[a("li",[t._v("代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。")]),t._v(" "),a("li",[t._v("适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。")]),t._v(" "),a("li",[t._v("桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。")]),t._v(" "),a("li",[t._v("装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。")]),t._v(" "),a("li",[t._v("外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。")]),t._v(" "),a("li",[t._v("享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。")]),t._v(" "),a("li",[t._v("组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性")])]),t._v(" "),a("h3",{attrs:{id:"_4-3-行为型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-行为型模式"}},[t._v("#")]),t._v(" 4.3. 行为型模式")]),t._v(" "),a("p",[t._v("行为型模式用于描述程序在运行时复杂的流程控制，即描述"),a("strong",[t._v("多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务")]),t._v("，它涉及算法与对象间职责的分配")]),t._v(" "),a("p",[a("strong",[t._v("行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为")]),t._v("。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性")]),t._v(" "),a("ol",[a("li",[t._v("模板方法（Template Method）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。")]),t._v(" "),a("li",[t._v("策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。")]),t._v(" "),a("li",[t._v("命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。")]),t._v(" "),a("li",[t._v("职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。")]),t._v(" "),a("li",[t._v("状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。")]),t._v(" "),a("li",[t._v("观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。")]),t._v(" "),a("li",[t._v("中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。")]),t._v(" "),a("li",[t._v("迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。")]),t._v(" "),a("li",[t._v("访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。")]),t._v(" "),a("li",[t._v("备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。")]),t._v(" "),a("li",[t._v("解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。")])]),t._v(" "),a("h2",{attrs:{id:"_5-作用区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-作用区分"}},[t._v("#")]),t._v(" 5. 作用区分")]),t._v(" "),a("p",[t._v("根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种")]),t._v(" "),a("h3",{attrs:{id:"_5-1-类模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-类模式"}},[t._v("#")]),t._v(" 5.1. 类模式")]),t._v(" "),a("p",[t._v("用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF 中的工厂方法、（类）适配器、模板方法、解释器属于该模式")]),t._v(" "),a("h3",{attrs:{id:"_5-2-对象模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-对象模式"}},[t._v("#")]),t._v(" 5.2. 对象模式")]),t._v(" "),a("p",[t._v("用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式")]),t._v(" "),a("h2",{attrs:{id:"_6-设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-设计原则"}},[t._v("#")]),t._v(" 6. 设计原则")]),t._v(" "),a("p",[t._v("设计模式的七大原则")]),t._v(" "),a("ul",[a("li",[t._v("开闭原则（Open Closed Principle，OCP）")]),t._v(" "),a("li",[t._v("里氏替换原则（Liskov Substitution Principle，LSP）")]),t._v(" "),a("li",[t._v("依赖倒置原则（Dependence Inversion Principle，DIP）")]),t._v(" "),a("li",[t._v("单一职责原则（Single Responsibility Principle，SRP）")]),t._v(" "),a("li",[t._v("接口隔离原则（Interface Segregation Principle，ISP）")]),t._v(" "),a("li",[t._v("迪米特法则（Law of Demeter，LoD）又叫作最少知识原则（Least Knowledge Principle，LKP)")]),t._v(" "),a("li",[t._v("合成复用原则（Composite Reuse Principle，CRP）又叫组合/聚合复用原则（Composition/Aggregate Reuse Principle，CARP）")])]),t._v(" "),a("h3",{attrs:{id:"_6-1-开闭原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-开闭原则"}},[t._v("#")]),t._v(" 6.1. 开闭原则")]),t._v(" "),a("h3",{attrs:{id:"_6-2-里氏替换原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-里氏替换原则"}},[t._v("#")]),t._v(" 6.2. 里氏替换原则")]),t._v(" "),a("h3",{attrs:{id:"_6-3-依赖倒置原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-依赖倒置原则"}},[t._v("#")]),t._v(" 6.3. 依赖倒置原则")]),t._v(" "),a("h3",{attrs:{id:"_6-4-单一职责原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-单一职责原则"}},[t._v("#")]),t._v(" 6.4. 单一职责原则")]),t._v(" "),a("h3",{attrs:{id:"_6-5-接口隔离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-接口隔离原则"}},[t._v("#")]),t._v(" 6.5. 接口隔离原则")]),t._v(" "),a("h3",{attrs:{id:"_6-6-迪米特法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-迪米特法则"}},[t._v("#")]),t._v(" 6.6. 迪米特法则")]),t._v(" "),a("h3",{attrs:{id:"_6-7-合成复用原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-合成复用原则"}},[t._v("#")]),t._v(" 6.7. 合成复用原则")])])}),[],!1,null,null,null);_.default=e.exports}}]);