(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{435:function(t,_,v){"use strict";v.r(_);var a=v(9),r=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"cap和base理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cap和base理论"}},[t._v("#")]),t._v(" CAP和BASE理论")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img12.360buyimg.com/img/jfs/t28378/227/655268493/345955/415ecbc9/5bfaacceNa3d6b4c0.jpg",alt:"图片"}})]),t._v(" "),v("h2",{attrs:{id:"_1-问题的提出"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-问题的提出"}},[t._v("#")]),t._v(" 1. 问题的提出")]),t._v(" "),v("p",[t._v("在计算机科学领域，"),v("strong",[t._v("分布式一致性是一个相当重要且被广泛探索与论证问题")]),t._v("，首先来看三种业务场景")]),t._v(" "),v("h3",{attrs:{id:"_1-1-火车站售票"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-火车站售票"}},[t._v("#")]),t._v(" 1.1. 火车站售票")]),t._v(" "),v("p",[t._v("假如说我们的终端用户是一位经常坐火车的旅行家，通常他是去车站的售票处购买车票，然后拿着车票去检票口，再坐上火车，开始一段美好的旅行，一切似乎都是那么和谐")]),t._v(" "),v("p",[t._v("想象一下，"),v("strong",[t._v("如果他选择的目的地是杭州，而某一趟开往杭州的火车只剩下最后一张车票，可能在同一时刻，不同售票窗口的另一位乘客也购买了同一张车票。假如说售票系统没有进行一致性的保障，两人都购票成功了。而在检票口检票的时候，其中一位乘客会被告知他的车票无效")])]),t._v(" "),v("p",[t._v('当然，现代的中国铁路售票系统已经很少出现这样的问题了。但在这个例子中我们可以看出，终端用户对于系统的需求非常简单："请售票给我，如果没有余票了，请在售票的时候就告诉我票是无效的"')]),t._v(" "),v("p",[t._v("这就对购票系统提出了严格的一致性要求，系统的数据(本例中指的就是那趟开往杭州的火车的余票数)无论在哪个售票窗口，每时每刻都必须是准确无误的")]),t._v(" "),v("h3",{attrs:{id:"_1-2-银行转账"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-银行转账"}},[t._v("#")]),t._v(" 1.2. 银行转账")]),t._v(" "),v("p",[t._v("假如我们的终端用户是一位刚毕业的大学生，通常在拿到第一个月工资的时候，都会选择向家里汇款。"),v("strong",[t._v('当他来到银行柜台，完成转账操作后，银行的柜台服务员会友善地提醒他："您的转账将在N个工作日后到账！"。此时这名毕业生有一定的沮丧，会对那名柜台服务员叮嘱："好吧，多久没关系，钱不要少就好了！"')])]),t._v(" "),v("p",[t._v("这也成为了几乎所有用户对于现代银行系统最基本的需求")]),t._v(" "),v("h3",{attrs:{id:"_1-3-网上购物"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-网上购物"}},[t._v("#")]),t._v(" 1.3. 网上购物")]),t._v(" "),v("p",[t._v("假如说我们的终端用户是一位网购达人，当他看见一件库存量为 5 的心仪商品，会迅速地确认购买，写下收货地址，然后下单")]),t._v(" "),v("p",[t._v('然而，在下单的那个瞬间，系统可能会告知该用户："库存量不足！"。此时绝大部分消费者都会抱怨自己动作太慢，使得心爱的商品被其他人抢走了。')]),t._v(" "),v("p",[t._v("但其实有过网购系统开发经验的工程师一定明白，"),v("strong",[t._v("在商品详情页上显示的那个库存量，通常不是该商品的真实库存量，只有在真正下单购买的时候，系统才会检查该商品的真实库存量")]),t._v("。但是，谁在意呢？")]),t._v(" "),v("h2",{attrs:{id:"_2-问题的解读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-问题的解读"}},[t._v("#")]),t._v(" 2. 问题的解读")]),t._v(" "),v("p",[t._v("对于上面三个例子，相信大家一定看出来了，我们的终端用户在使用不同的计算机产品时对于数据一致性的需求是不一样的")]),t._v(" "),v("ul",[v("li",[t._v("有些系统，"),v("strong",[t._v("既要快速地响应用户，同时还要保证系统的数据对于任意客户端都是真实可靠的")]),t._v("，就像火车站售票系统")]),t._v(" "),v("li",[t._v("有些系统，"),v("strong",[t._v("需要为用户保证绝对可靠的数据安全，虽然在数据一致性上存在延时，但最终务必保证严格的一致性")]),t._v("，就像银行的转账系统")]),t._v(" "),v("li",[t._v("有些系统，"),v("strong",[t._v('虽然向用户展示了一些可以说是"错误"的数据，但是在整个系统使用过程中，一定会在某一个流程上对系统数据进行准确无误的检查，从而避免用户发生不必要的损失')]),t._v("，就像网购系统")])]),t._v(" "),v("h2",{attrs:{id:"_3-分布式一致性的提出"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-分布式一致性的提出"}},[t._v("#")]),t._v(" 3. 分布式一致性的提出")]),t._v(" "),v("p",[t._v("在分布式系统中要解决的一个重要问题就是数据的复制。在我们的日常开发经验中，相信很多开发人员都遇到过这样的问题："),v("strong",[t._v("假设客户端 C1 将系统中的一个值 K 由 V1 更新为 V2，但客户端 C2 无法立即读取到 K 的最新值，需要在一段时间之后才能读取到。这很正常，因为数据库复制之间存在延时")])]),t._v(" "),v("p",[t._v("分布式系统对于数据的复制需求一般都来自于以下两个原因")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("为了增加系统的可用性，以防止单点故障引起的系统不可用")])]),t._v(" "),v("li",[v("strong",[t._v("提高系统的整体性能，通过负载均衡技术，能够让分布在不同地方的数据副本都能够为用户提供服务")])])]),t._v(" "),v("p",[t._v("数据复制在可用性和性能方面给分布式系统带来的巨大好处是不言而喻的，然而数据复制所带来的一致性挑战，也是每一个系统研发人员不得不面对的")]),t._v(" "),v("p",[t._v("所谓分布一致性问题，是指在分布式环境中引入数据复制机制之后，不同数据节点之间可能出现的，并无法依靠计算机应用程序自身解决的数据不一致的情况。简单讲，"),v("strong",[t._v("数据一致性就是指在对一个副本数据进行更新的时候，必须确保也能够更新其他的副本，否则不同副本之间的数据将不一致")])]),t._v(" "),v("p",[t._v("那么如何解决这个问题？一种思路是"),v("strong",[t._v("既然是由于延时动作引起的问题，那我可以将写入的动作阻塞，直到数据复制完成后，才完成写入动作")]),t._v("。 没错，这似乎能解决问题，而且有一些系统的架构也确实直接使用了这个思路。但这个思路在解决一致性问题的同时，又带来了新的问题：写入的性能。如果你的应用场景有非常多的写请求，那么使用这个思路之后，后续的写请求都将会阻塞在前一个请求的写操作上，导致系统整体性能急剧下降")]),t._v(" "),v("p",[t._v("总体来说，"),v("strong",[t._v("我们无法找到一种能够满足分布式系统所有系统属性的分布式一致性解决方案")]),t._v("。因此，"),v("strong",[t._v("如何既保证数据的一致性，同时又不影响系统运行的性能，是每一个分布式系统都需要重点考虑和权衡的")]),t._v("。于是，一致性级别由此诞生")]),t._v(" "),v("h3",{attrs:{id:"_3-1-强一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-强一致性"}},[t._v("#")]),t._v(" 3.1. 强一致性")]),t._v(" "),v("p",[t._v("这种一致性级别是最符合用户直觉的，它要求"),v("strong",[t._v("系统写入什么，读出来的也会是什么(数据时时一致)")]),t._v("，用户体验好，但实现起来往往对系统的性能影响大")]),t._v(" "),v("h3",{attrs:{id:"_3-2-弱一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-弱一致性"}},[t._v("#")]),t._v(" 3.2. 弱一致性")]),t._v(" "),v("p",[t._v("这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不久承诺多久之后数据能够达到一致，但"),v("strong",[t._v("会尽可能地保证到某个时间级别(比如秒级别)后，数据能够达到一致状态")])]),t._v(" "),v("h3",{attrs:{id:"_3-3-最终一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-最终一致性"}},[t._v("#")]),t._v(" 3.3. 最终一致性")]),t._v(" "),v("p",[t._v("最终一致性是弱一致性的一个特例，"),v("strong",[t._v("系统会保证在一定时间内，能够达到一个数据一致的状态")]),t._v("。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型")]),t._v(" "),v("h3",{attrs:{id:"_3-4-分布式一致性算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-分布式一致性算法"}},[t._v("#")]),t._v(" 3.4. 分布式一致性算法")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/130332285",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式一致性算法-Paxos、Raft、ZAB、Gossip"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.jianshu.com/p/2bceacd60b8a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zookeeper——一致性协议:Zab协议"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"_4-分布式环境的各种问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式环境的各种问题"}},[t._v("#")]),t._v(" 4. 分布式环境的各种问题")]),t._v(" "),v("p",[t._v("分布式系统体系结构从其出现之初就伴随着诸多的难题和挑战")]),t._v(" "),v("h3",{attrs:{id:"_4-1-通信异常"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-通信异常"}},[t._v("#")]),t._v(" 4.1. 通信异常")]),t._v(" "),v("p",[t._v("从集中式向分布式演变的过程中，必然引入网络因素，由于网络本身的不可靠性，因此也引入了额外的问题。分布式系统需要在各个节点之间进行网络通信，因此每次网络通信都会伴随着网络不可用的风险，网络光纤、路由器或是 DNS 等硬件设备或 是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。另外，即使分布式系统各个节点之间的网络通信能够正常进行，其延时也会大于单机操作。通常 我们认为现代计算机体系结构中，单机内存访问的延时在纳秒数量级(通常是 10ns )，而正常的一次网络通信的延迟在 0.1~1ms 左右(相当于内存访问延时的 105 倍)，如此巨大的延时差别，也会影响到消息的收发过程，因此消息丢失和消息延迟变得非常普遍")]),t._v(" "),v("h3",{attrs:{id:"_4-2-网络分区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-网络分区"}},[t._v("#")]),t._v(" 4.2. 网络分区")]),t._v(" "),v("p",[v("strong",[t._v("当网络由于发生异常情况，导致分布式系统中部分节点之间的网络延时不断增大，最终导致组成分布式系统的所有节点中，只有部分节点之间能够正常通信，而另一些节点则不能，我们将这个现象称为网络分区")]),t._v("。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括对数据的事物处理，这就对分布式一致性提出了非常大的挑战")]),t._v(" "),v("h3",{attrs:{id:"_4-3-三态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-三态"}},[t._v("#")]),t._v(" 4.3. 三态")]),t._v(" "),v("p",[t._v("上面两点，我们已经了解到在分布式环境下，网络可能会出现各式各样的问题，因此分布式系统的每一次请求与响应，存在特有的三态概念")]),t._v(" "),v("ul",[v("li",[t._v("成功")]),t._v(" "),v("li",[t._v("失败")]),t._v(" "),v("li",[t._v("超时")])]),t._v(" "),v("p",[v("strong",[t._v("在传统的单机系统中，应用程序在调用一个函数之后，能够得到一个非常明确的响应：成功或失败。而在分布式系统中，由于网络是不可靠的，虽然在绝大部分情况下，网络通信也能够接受到成功或失败的响应，当时当网络出现异常的情况下，就可能会出现超时现象")]),t._v("，通常有以下两种情况")]),t._v(" "),v("ul",[v("li",[t._v("由于网络原因，该请求并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象")]),t._v(" "),v("li",[t._v("该请求成功地被接收方接收后，进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象")])]),t._v(" "),v("p",[t._v("当出现这样的超时现象时，网络通信的发起方是无法确定当前请求是否被成功处理的")]),t._v(" "),v("h3",{attrs:{id:"_4-4-节点故障"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-节点故障"}},[t._v("#")]),t._v(" 4.4. 节点故障")]),t._v(" "),v("p",[t._v('节点故障则是分布式环境下另一个比较常见的问题，指的是组成分布式系统的服务器节点出现的宕机或"僵死"现象，通常根据经验来说，每个节点都有可能出现故障，并且每天都在发生')]),t._v(" "),v("h2",{attrs:{id:"_5-分布式事物"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式事物"}},[t._v("#")]),t._v(" 5. 分布式事物")]),t._v(" "),v("p",[t._v("随着分布式计算的发展，事物在分布式计算领域也得到了广泛的应用。在单机数据库中，我们很容易能够实现一套满足 ACID 特性的事物处理系统，但在分布式数据库中，数据分散在各台不同的机器上，如何对这些数据进行分布式的事物处理具有非常大的挑战")]),t._v(" "),v("p",[t._v("分布式事物是指事物的参与者、支持事物的服务器、资源服务器以及事物管理器分别位于分布式系统的不同节点上，通常一个分布式事物中会涉及对多个数据源或业务系统的操作")]),t._v(" "),v("p",[t._v("可以设想一个最典型的分布式事物场景：一个跨银行的转账操作涉及调用两个异地的银行服务，其中一个是本地银行提供的取款服务，另一个则是目标银行提供的存款服务，这两个服务本身是无状态并且相互独立的，共同构成了一个完整的分布式事物。如果从本地银行取款成功，但是因为某种原因存款服务失败了，那么就必须回滚到取款之前的状态，否则用户可能会发现自己的钱不翼而飞了")]),t._v(" "),v("p",[t._v("从这个例子可以看到，一个分布式事务可以看做是多个分布式的操作序列组成的，例如上面例子的取款服务和存款服务，通常可以把这一系列分布式的操作序列称为子事物。因此，分布式事务也可以被定义为一种嵌套型的事物，同时也就具有了 ACID 事物特性。但由于在分布式事务中，各个子事物的执行是分布式的，因此要实现一种能够保证 ACID 特性的分布式事物处理系统就显得格外复杂")]),t._v(" "),v("h2",{attrs:{id:"_6-cap理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-cap理论"}},[t._v("#")]),t._v(" 6. CAP理论")]),t._v(" "),v("p",[t._v("一个经典的分布式系统理论。"),v("strong",[t._v("CAP理论")]),t._v("告诉我们："),v("strong",[t._v("一个分布式系统不可能同时满足这三个基本需求，最多只能同时满足其中两项")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("一致性(Consistency)")])]),t._v(" "),v("li",[v("strong",[t._v("可用性(Availability)")])]),t._v(" "),v("li",[v("strong",[t._v("分区容错性(Partition tolerance)")])])]),t._v(" "),v("h3",{attrs:{id:"_6-1-一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-一致性"}},[t._v("#")]),t._v(" 6.1. 一致性")]),t._v(" "),v("p",[t._v("在分布式环境下，一致性是指数据在多个副本之间能否保持一致的特性。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一直的状态。")]),t._v(" "),v("p",[t._v("对于一个将数据副本分布在不同分布式节点上的系统来说，如果对第一个节点的数据进行了更新操作并且更新成功后，却没有使得第二个节点上的数据得到相应的更新，于是在对第二个节点的数据进行读取操作时，获取的依然是老数据（或称为脏数据），这就是典型的分布式数据不一致的情况。在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都可以读取到其最新的值，那么，这样的系统就被认为具有强一致性")]),t._v(" "),v("h3",{attrs:{id:"_6-2-可用性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-可用性"}},[t._v("#")]),t._v(" 6.2. 可用性")]),t._v(" "),v("p",[t._v("可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。这里的重点是"),v("strong",[t._v("有限时间内")]),t._v("和"),v("strong",[t._v("返回结果")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("有限时间内")]),t._v("是指，对于用户的一个操作请求，系统必须能够在指定的时间内返回对应的处理结果，如果超过了这个时间范围，那么系统就被认为是不可用的。另外，"),v("strong",[t._v("有限的时间内")]),t._v("是指系统设计之初就设计好的运行指标，通常不同系统之间有很大的不同，无论如何，对于用户请求，系统必须存在一个合理的响应时间，否则用户便会对系统感到失望。")]),t._v(" "),v("p",[v("strong",[t._v("返回结果")]),t._v("是可用性的另一个非常重要的指标，它要求系统在完成对用户请求的处理后，返回一个正常的响应结果。正常的响应结果通常能够明确地反映出队请求的处理结果，即成功或失败，而不是一个让用户感到困惑的返回结果。")]),t._v(" "),v("h3",{attrs:{id:"_6-3-分区容错性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-分区容错性"}},[t._v("#")]),t._v(" 6.3. 分区容错性")]),t._v(" "),v("p",[t._v("分区容错性约束了一个分布式系统具有如下特性："),v("strong",[t._v("分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障")]),t._v("。")]),t._v(" "),v("p",[t._v("网络分区是指在分布式系统中，不同的节点分布在不同的子网络(机房或异地网络)中，由于一些特殊的原因导致这些子网络出现网络不连通的状况，但各个子网络的内部网络是正常的，从而导致整个系统的网络环境被切分成了若干个孤立的区域(分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信)。需要注意的是，组成一个分布式系统的每个节点的加入与退出都可以看作是一个特殊的网络分区。")]),t._v(" "),v("h3",{attrs:{id:"_6-4-特点总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-特点总结"}},[t._v("#")]),t._v(" 6.4. 特点总结")]),t._v(" "),v("p",[v("strong",[t._v("既然一个分布式系统无法同时满足一致性、可用性、分区容错性三个特点，所以我们就需要抛弃一样")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wliduo/CDN@1.1/2019/11/20191128001.png",alt:"图片"}})]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("选择")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[v("strong",[t._v("CA")])]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("放弃"),v("strong",[t._v("分区容错性")]),t._v("，"),v("strong",[t._v("加强一致性和可用性")]),t._v("，其实就是"),v("strong",[t._v("传统的单机数据库的选择")])])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[v("strong",[t._v("AP")])]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("放弃"),v("strong",[t._v("一致性(这里说的一致性是强一致性)")]),t._v("，"),v("strong",[t._v("追求分区容错性和可用性")]),t._v("，允许读取所有节点的数据，但是数据可能不一致，这是"),v("strong",[t._v("很多分布式系统设计时的选择")]),t._v("，例如很多 NoSQL 系统就是如此")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[v("strong",[t._v("CP")])]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("放弃"),v("strong",[t._v("可用性")]),t._v("，"),v("strong",[t._v("追求一致性和分区容错性")]),t._v("，不能访问未同步完成的节点，失去部分可用性，"),v("strong",[t._v("基本不会选择，网络问题会直接让整个系统不可用")])])])])]),t._v(" "),v("p",[t._v("需要明确的一点是，对于一个分布式系统而言，分区容错性是一个最基本的要求。因为既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓分布式系统了，因此必然出现子网络。而对于分布式系统而言，网络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。"),v("strong",[t._v("因此系统架构师往往需要把精力花在如何根据业务特点在C(一致性)和A(可用性)之间寻求平衡")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"_7-base理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-base理论"}},[t._v("#")]),t._v(" 7. BASE理论")]),t._v(" "),v("p",[t._v("BASE 理论是对 CAP 中"),v("strong",[t._v("一致性")]),t._v("和"),v("strong",[t._v("可用性")]),t._v("权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的。BASE 理论的核心思想是："),v("strong",[t._v("即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性")]),t._v("。接下来看一下 BASE 中的三要素")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Basically Available(基本可用)")])]),t._v(" "),v("li",[v("strong",[t._v("Soft state(软状态)")])]),t._v(" "),v("li",[v("strong",[t._v("Eventually consistent(最终一致性)")])])]),t._v(" "),v("h3",{attrs:{id:"_7-1-基本可用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-基本可用"}},[t._v("#")]),t._v(" 7.1. 基本可用")]),t._v(" "),v("p",[t._v("基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性(注意，这绝不等价于系统不可用)。比如：")]),t._v(" "),v("ul",[v("li",[t._v("响应时间上的损失。正常情况下，一个在线搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了 1~2 秒")]),t._v(" "),v("li",[t._v("系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面")])]),t._v(" "),v("h3",{attrs:{id:"_7-2-软状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-软状态"}},[t._v("#")]),t._v(" 7.2. 软状态")]),t._v(" "),v("p",[t._v("软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时")]),t._v(" "),v("h3",{attrs:{id:"_7-3-最终一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-最终一致性"}},[t._v("#")]),t._v(" 7.3. 最终一致性")]),t._v(" "),v("p",[t._v("最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。")]),t._v(" "),v("h3",{attrs:{id:"_7-4-特点总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-特点总结"}},[t._v("#")]),t._v(" 7.4. 特点总结")]),t._v(" "),v("p",[t._v("ACID 要求强一致性，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过牺牲强一致性来达到可用性，通常运用在大型分布式系统中，总的来说，BASE 理论面向的是大型高可用可扩展的分布式系统，和传统的事物 ACID 特性是相反的")]),t._v(" "),v("p",[v("strong",[t._v("它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID 特性和 BASE 理论往往又会结合在一起")])]),t._v(" "),v("h2",{attrs:{id:"_8-酸碱平衡"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-酸碱平衡"}},[t._v("#")]),t._v(" 8. 酸碱平衡")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/database/00-Isolation.html"}},[t._v("ACID以及事务隔离级别")])],1)]),t._v(" "),v("p",[t._v("CAP 理论告诉我们一个悲惨但不得不接受的事实——我们只能在 C、A、P 中选择两个条件。而对于业务系统而言，我们往往选择牺牲一致性来换取系统的可用性和分区容错性。不过这里要指出的是，所谓的“牺牲一致性”并不是完全放弃数据一致性，而是"),v("strong",[t._v("牺牲强一致性换取弱一致性")])]),t._v(" "),v("p",[t._v("ACID 能够保证事务的强一致性，即数据是实时一致的。这在本地事务中是没有问题的，在分布式事务中，强一致性会极大影响分布式系统的性能，因此分布式系统中遵循 BASE 理论即可。但分布式系统的不同业务场景对一致性的要求也不同")]),t._v(" "),v("p",[t._v("如交易场景下，就要求强一致性，此时就需要遵循 ACID 理论，而在注册成功后发送短信验证码等场景下，并不需要实时一致，因此遵循 BASE 理论即可。因此要根据具体业务场景，在 ACID 和 BASE 之间寻求平衡")]),t._v(" "),v("p",[v("strong",[t._v("参考")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://github.com/CyC2018/CS-Notes/blob/master/notes/%E5%88%86%E5%B8%83%E5%BC%8F.md#%E4%B8%89cap",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cap-%E4%B8%8E-base-%E7%90%86%E8%AE%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("CAP 与 BASE 理论"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/szlbm/p/5588543.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("从分布式一致性谈到CAP理论、BASE理论"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.im/post/6844903573667446797",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用的分布式事务解决方案"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);