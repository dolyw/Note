(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{400:function(t,e,a){"use strict";a.r(e);var v=a(9),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"acid以及事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid以及事务隔离级别"}},[t._v("#")]),t._v(" ACID以及事务隔离级别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img10.360buyimg.com/img/jfs/t30082/42/674125047/338074/2435ab67/5bfaa69dN64b7af52.jpg",alt:"图片"}})]),t._v(" "),a("p",[t._v("ACID是指在可靠数据库管理系统(DBMS)中，"),a("strong",[t._v("事务(Transaction)"),a("strong",[t._v("所应该具有的")]),t._v("四个特性")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原子性(Atomicity)")])]),t._v(" "),a("li",[a("strong",[t._v("一致性(Consistency)")])]),t._v(" "),a("li",[a("strong",[t._v("隔离性(Isolation)")])]),t._v(" "),a("li",[a("strong",[t._v("持久性(Durability)")])])]),t._v(" "),a("p",[t._v("这是可靠数据库所应具备的几个特性，这些特性保证了数据库事物的可靠")]),t._v(" "),a("p",[t._v("在数据库中，"),a("strong",[t._v("对数据的一系列操作在逻辑上可以看成一个整体的操作")]),t._v("，这个整体的操作就叫"),a("strong",[t._v("事物")])]),t._v(" "),a("h2",{attrs:{id:"原子性-atomicity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性(Atomicity)")]),t._v(" "),a("p",[t._v("原子性是指事务是一个不可再分割的工作单位，要求每个事物中的所有操作"),a("strong",[t._v("要么全部完成，要么就像全部没有发生一样")])]),t._v(" "),a("p",[t._v("如果事物中的部分操作失败了，则整个事物事物失败了，结果就是数据库中的状态保持没变。原子性系统必须保证在各种情况下的原子性，包括主机断电、主机发生了错误、主机奔溃。对外界来说，一个提交了的事物看起来(通过事物对数据库产生的影响)是不可分的，一个失败了的事物，对外界来说就好像什么都没有发生过一样")]),t._v(" "),a("h2",{attrs:{id:"一致性-consistency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" 一致性(Consistency)")]),t._v(" "),a("p",[a("strong",[t._v("一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏")]),t._v("。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性")]),t._v(" "),a("p",[t._v("一致性确保了任何事物都会使数据库从一种合法的状态变为另一种合法的状态。通过定义的各种规则，包括约束(Constraints)、级联(Cascades)、触发器(Triggers)以及它们的组合来保证写入数据库的所有数据都必须是合法的。一致性并不能保证事物(程序)的正确性，换句话说事物的一致性并不一定如程序员所期望的那样(这应该是由应用层代码来负责的)，它只能保证数据库中的所有数据都不会违反定义好的规则，不管程序有没有发生错误甚至是发生了任何错误都不会违反定义好的规则")]),t._v(" "),a("h2",{attrs:{id:"隔离性-isolation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性(Isolation)")]),t._v(" "),a("p",[a("strong",[t._v("隔离性保证了并发执行多个事物对系统的状态的影响和串行化执行多个事物对系统的状态的影响是一样的")])]),t._v(" "),a("p",[t._v("多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果")]),t._v(" "),a("p",[t._v("这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据")]),t._v(" "),a("p",[a("strong",[t._v("数据库管理系统采用锁机制来实现事务的隔离性")]),t._v("。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据")]),t._v(" "),a("h3",{attrs:{id:"不考虑事务的隔离性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不考虑事务的隔离性"}},[t._v("#")]),t._v(" 不考虑事务的隔离性")]),t._v(" "),a("p",[t._v("如果不考虑事务的隔离性，那么会发生下面所示的问题")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("脏读(Dirty Read)")])])]),t._v(" "),a("p",[t._v("所谓脏读是指"),a("strong",[t._v("一个事务中访问到了另外一个事务未提交的数据")])]),t._v(" "),a("p",[t._v("当一个事务读取另一个事务尚未提交的修改时，产生脏读")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("丢失更新(Lost Update)")])])]),t._v(" "),a("p",[t._v("当系统允许两个事务同时更新同一数据时，"),a("strong",[t._v("后一个事务拿到了前一个事务的中间状态数据(一个事务的更新操作被另外一个事务的更新操作所覆盖)")]),t._v("，一个事务的更新覆盖了其它事务的更新结果导致丢失更新")]),t._v(" "),a("ol",[a("li",[t._v("第一类丢失更新，回滚丢失，隔离级别可以解决")]),t._v(" "),a("li",[t._v("第二类丢失更新，覆盖丢失/两次更新问题，只能通过锁解决，"),a("RouterLink",{attrs:{to:"/database/01-MySQL-Lock.html"}},[t._v("乐观锁或悲观锁")])],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不可重复读(NonRepeatable Read)")])])]),t._v(" "),a("p",[t._v("同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读")]),t._v(" "),a("p",[t._v("通俗解释是指"),a("strong",[t._v("在同一个事务内根据同一个条件对行记录(同一条数据)进行多次查询，但是搜出来的结果(数据)却不一致")]),t._v("，发生不可重复读的原因是在多次搜索期间查询条件覆盖的数据被其他事务修改了")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("幻读(Phantom Read)")])])]),t._v(" "),a("p",[t._v("同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻像读")]),t._v(" "),a("p",[t._v("通俗解释是指"),a("strong",[t._v("同一个事务内多次查询返回的结果集不一样(比如增加了或者减少了行记录)")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("幻读和不可重复读的区别")]),t._v("，幻读和不可重读读都是读取了另一个事务中已经提交的数据，不同的是不可重复读多次查询的都是同一个数据项，针对的是对同一行数据进行修改(Update)或删除(Delete)，而幻读针对的是一个数据整体(数据的条数)，主要是插入(Insert)操作"),a("br"),t._v(" "),a("strong",[t._v("比如")]),t._v("，同一个事务A内第一次查询时候有N条记录，但是第二次同等条件下查询却又N+1条记录，这就好像产生了幻觉，为啥两次结果不一样。其实和不可重复读一样，发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据。不同在于不可重复读是同一个记录的数据内容被修改了，幻读是数据行记录变多了或者少了")])]),t._v(" "),a("h3",{attrs:{id:"read-uncommitted-未提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-uncommitted-未提交读"}},[t._v("#")]),t._v(" Read Uncommitted(未提交读)")]),t._v(" "),a("p",[t._v("读取未提交内容，在该隔离级别，"),a("strong",[t._v("所有事物都可以看到其它未提交事务的执行结果")]),t._v("，即在未提交读级别，事务中的修改，即使没有提交，对其他事务也都是可见的，该隔离级别很少用于实际应用。"),a("strong",[t._v("读取未提交的数据，也被称之为脏读(Dirty Read)")]),t._v("。该隔离级别最低，并发性能高")]),t._v(" "),a("h3",{attrs:{id:"read-committed-提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-committed-提交读"}},[t._v("#")]),t._v(" Read Committed(提交读)")]),t._v(" "),a("p",[t._v("读取提交内容，这是大多数数据库默认的隔离级别。它满足了隔离的简单定义，"),a("strong",[t._v("一个事务只能看见已经提交事务所做的改变")]),t._v("。换句话说，一个事务从开始到提交之前，所做的任何修改对其他事务都是不可见的")]),t._v(" "),a("h3",{attrs:{id:"repeatable-read-可重复读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repeatable-read-可重复读"}},[t._v("#")]),t._v(" Repeatable Read(可重复读)")]),t._v(" "),a("p",[a("strong",[t._v("可重复读可以确保同一个事务，在多次读取同样数据的时候，得到同样的结果")]),t._v("。可重复读解决了脏读的问题，不过理论上，这会导致另外一个棘手的问题，幻读(Phantom Read)。MySQL中的InnoDB和Falcon存储引擎通过MVCC(Multi-Version Concurrency Control，多版本并发控制)机制解决了该问题，需要注意的是，多版本控制只是解决了不可重复读的问题，而加上间隙锁(也就是它这里所谓的并发控制)才解决了幻读问题")]),t._v(" "),a("h3",{attrs:{id:"serializable-可串行化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serializable-可串行化"}},[t._v("#")]),t._v(" Serializable(可串行化)")]),t._v(" "),a("p",[t._v("序列化，这是最高的隔离级别，它通过"),a("strong",[t._v("强制事务排序，强制事务串行执行")]),t._v("，从而解决幻读问题，简而言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的等待超时和锁竞争，实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑使用这个隔离级别，这是花费代价最高但是最可靠的隔离级别")]),t._v(" "),a("h3",{attrs:{id:"隔离级别总结-isolation-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别总结-isolation-level"}},[t._v("#")]),t._v(" 隔离级别总结(Isolation Level)")]),t._v(" "),a("p",[t._v("隔离级别(Isolation Level)与并发性是互为矛盾的")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("隔离级别")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Read Uncommitted(未提交读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Read Committed(提交读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Repeatable Read(可重复读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Serializable(可串行化)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("脏读(Dirty Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("丢失更新(Lost Update)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("不可重复读(NonRepeatable Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("幻读(Phantom Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("默认级别数据库")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Oracle，SQL Server")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("MySQL(InnoDB)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("并发性能")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("最高")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("第二")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("第三")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("最低")])])])]),t._v(" "),a("p",[a("strong",[t._v("隔离程度越高，数据库的并发性越差；隔离程度越低，数据库的并发性越好")])]),t._v(" "),a("h2",{attrs:{id:"持久性-durability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性(Durability)")]),t._v(" "),a("p",[t._v("持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚")]),t._v(" "),a("p",[a("strong",[t._v("即使出现了任何事故比如断电(甚至事物刚被提交数据库系统就发生了奔溃)等，事务一旦提交，则持久化保存在数据库中")])]),t._v(" "),a("h4",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),a("p",[a("strong",[t._v("好多数据库依赖锁来实现ACID能力")]),t._v("。锁意味着事物在其需要访问的数据上打个标记，这样一来数据库管理系统就会知道这些数据在该事物完成(事物成功或失败)之前不允许其他事物修改这些被打了标记的数据。锁在数据被处理之前必须获取到，也包括处理那些只会被读取但不会被修改的数据之前也要获取锁。非平常事物通常需要大量锁，导致了不小的性能开销同时也阻塞了其他事物。例如，"),a("strong",[t._v("用户A正在执行一个事物，需要读取某一行数据而这时另外一个用户B正在修改这一行数据。用户B必须等到用户A的事物彻底完成")]),t._v("。通常可以通过两个阶段锁来保证全隔离性")]),t._v(" "),a("ul",[a("li",[t._v("美团-Innodb中的事务隔离级别和锁的关系: "),a("a",{attrs:{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tech.meituan.com/2014/08/20/innodb-lock.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢敦格的谈谈数据库的ACID: "),a("a",{attrs:{href:"https://blog.csdn.net/shuaihj/article/details/14163713",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/shuaihj/article/details/14163713"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢一中晴哥威武的数据库的ACID属性: "),a("a",{attrs:{href:"https://www.cnblogs.com/liuqing576598117/p/9564916.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/liuqing576598117/p/9564916.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢lhrbest的事务的4种隔离级别(Isolation Level)分别是什么: "),a("a",{attrs:{href:"http://blog.itpub.net/26736162/viewspace-2638951",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://blog.itpub.net/26736162/viewspace-2638951"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢Jade_K的事务隔离级别(IsolationLevel): "),a("a",{attrs:{href:"https://www.cnblogs.com/wms01/p/6183241.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/wms01/p/6183241.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢阿里加多的何为脏读、不可重复读、幻读: "),a("a",{attrs:{href:"https://www.jianshu.com/p/f7ac1b22e899",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/f7ac1b22e899"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);